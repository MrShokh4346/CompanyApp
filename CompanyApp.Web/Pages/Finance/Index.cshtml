@page
@using Microsoft.EntityFrameworkCore
@using CompanyApp.Web.Data
@inject AppDbContext Db
@functions {
  public record DebtorVm(string Name, decimal Outstanding, int Orders);
  public decimal TotalReceivables { get; set; }
  public decimal TotalPayables { get; set; }
  public decimal IncomeMonth { get; set; }
  public List<DebtorVm> Debtors { get; set; } = new();

  public async Task OnGet(){
    // ДЕБИТОРЫ (по клиентам)
    var orders = await Db.Orders
      .Include(o=>o.Customer)
      .Include(o=>o.Items)
      .Include(o=>o.Payments)
      .ToListAsync();

    var debtByCustomer = orders
      .Select(o => new {
        Cust = o.Customer?.FullName ?? "(без клиента)",
        Due = Math.Max(0, o.Items.Sum(i=>i.Quantity*i.UnitPrice) - (o.Payments?.Sum(p=>p.Amount) ?? 0m))
      })
      .GroupBy(x => x.Cust)
      .Select(g => new DebtorVm(g.Key, g.Sum(x=>x.Due), orders.Count(o => (o.Customer?.FullName ?? "(без клиента)") == g.Key && Math.Max(0, o.Items.Sum(i=>i.Quantity*i.UnitPrice) - (o.Payments?.Sum(p=>p.Amount) ?? 0m)) > 0)))
      .Where(d => d.Outstanding > 0)
      .OrderByDescending(d => d.Outstanding)
      .ToList();

    Debtors = debtByCustomer;
    TotalReceivables = Debtors.Sum(d=>d.Outstanding);

    // КРЕДИТОРЫ (расходы)
    var expenses = await Db.Expenses.ToListAsync();
    TotalPayables = expenses.Sum(e => e.Outstanding);

    // ДОХОДЫ за текущий месяц (сумма поступивших платежей)
    var now = DateTime.UtcNow;
    var monthStart = new DateTime(now.Year, now.Month, 1);
    IncomeMonth = await Db.Payments.Where(p => p.PaidAt >= monthStart).SumAsync(p => p.Amount);
  }
}
<h3 class="mb-3">Финансы</h3>

<div class="row g-3 mb-3">
  <div class="col-12 col-md-4"><div class="card shadow-sm"><div class="card-body">
    <div class="text-muted small">Дебиторская задолженность</div>
    <div class="fs-4 fw-bold text-danger">@TotalReceivables</div>
  </div></div></div>
  <div class="col-6 col-md-4"><div class="card shadow-sm"><div class="card-body">
    <div class="text-muted small">Кредиторская задолженность</div>
    <div class="fs-4 fw-bold text-danger">@TotalPayables</div>
  </div></div></div>
  <div class="col-6 col-md-4"><div class="card shadow-sm"><div class="card-body">
    <div class="text-muted small">Доходы (текущий месяц)</div>
    <div class="fs-4 fw-bold text-success">@IncomeMonth</div>
  </div></div></div>
</div>

<div class="card shadow-sm">
  <div class="card-body">
    <div class="d-flex justify-content-between align-items-center mb-2">
      <h5 class="card-title mb-0">Дебиторы</h5>
      <a class="btn btn-outline-secondary" href="/Finance/Expenses">Кредиторы (расходы)</a>
    </div>
    <div class="table-responsive">
      <table class="table table-sm align-middle">
        <thead><tr><th>Клиент</th><th class="text-end">Задолженность</th><th class="text-end">Заказы с долгом</th></tr></thead>
        <tbody>
          @foreach (var d in Debtors){
            <tr>
              <td>@d.Name</td>
              <td class="text-end fw-bold">@d.Outstanding</td>
              <td class="text-end">@d.Orders</td>
            </tr>
          }
          @if(!Debtors.Any()){
            <tr><td colspan="3" class="text-center text-muted">Нет задолженностей</td></tr>
          }
        </tbody>
      </table>
    </div>
  </div>
</div>
